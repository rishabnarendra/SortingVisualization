{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingVisualizer/sortingVisualizer.jsx","SortingAlgorithms/selectionSort.js","SortingAlgorithms/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","sort","start","end","mid","Math","floor","middle","pointer1","pointer2","pointer3","push","merge","array_size","sortingVisualizer","props","state","this","resetArrayValues","min","max","i","random","setState","newvalue","minimum","j","temp","selectionSort","getSelectionSortAnimations","arrayBars","document","getElementsByClassName","barTwoIdx","swapIdx","barTwo","color","setTimeout","style","backgroundColor","barOneIdx","height1","height","height2","bubbleSort","getBubbleSortAnimations","barOne","newHeight","class","onClick","type","id","step","onInput","UpdateArraySize","test","value","mergeSort","map","idx","className","key","width","calculateWidth","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ae58eb1.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    sort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction sort(array, start, end, auxiliaryArray, animations) {\r\n    if(start === end) return\r\n        let mid = Math.floor((start + end) / 2)\r\n        sort(auxiliaryArray, start, mid, array, animations)\r\n        sort(auxiliaryArray, mid + 1, end, array, animations)\r\n\r\n        merge(array, start, mid, end, auxiliaryArray, animations)\r\n} \r\n\r\nfunction merge(array, start, middle, end, auxiliaryArray, animations) {\r\n    let pointer1 = start, pointer2 = middle + 1\r\n    let pointer3 = start \r\n    while(pointer1 <= middle && pointer2 <= end) {\r\n        animations.push([pointer1, pointer2]);\r\n        animations.push([pointer1, pointer2]);\r\n\r\n        if(auxiliaryArray[pointer1] <= auxiliaryArray[pointer2]) {\r\n            animations.push([pointer3, auxiliaryArray[pointer1]])\r\n            array[pointer3++] = auxiliaryArray[pointer1++]\r\n        }\r\n        else {\r\n            animations.push([pointer3, auxiliaryArray[pointer2]])\r\n            array[pointer3++] = auxiliaryArray[pointer2++]\r\n        }\r\n    }\r\n\r\n    while(pointer1 <= middle) {\r\n        animations.push([pointer1, pointer1])\r\n        animations.push([pointer1, pointer1])\r\n        animations.push([pointer3, auxiliaryArray[pointer1]])\r\n        array[pointer3++] = auxiliaryArray[pointer1++]\r\n    }\r\n    while(pointer2 <= end) {\r\n        animations.push([pointer2, pointer2])\r\n        animations.push([pointer2, pointer2])\r\n        animations.push([pointer3, auxiliaryArray[pointer2]])\r\n        array[pointer3++] = auxiliaryArray[pointer2++]\r\n    }\r\n}","import React, { Component } from 'react'; \r\nimport './sortingVisualizer.css';\r\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/selectionSort'; \r\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/bubbleSort'; \r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/mergeSort';\r\n\r\nlet array_size = 200;\r\nconst primary = 'turquoise'\r\nconst secondary = 'red'\r\nconst animationSpeed = 1\r\n\r\nexport default class sortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {array: [],}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArrayValues();\r\n      }\r\n\r\n    // Reset the values that the array holds \r\n    resetArrayValues() {\r\n        const array = []\r\n        for(let i = 0; i < array_size; i++) {\r\n            array.push(randomIntFromInterval(5, 730))\r\n        }\r\n        this.setState({array})\r\n    } \r\n\r\n    UpdateArraySize(newvalue) { \r\n        array_size = newvalue\r\n        this.resetArrayValues()\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array)\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar')\r\n          const [barOneIdx, barTwoIdx, swapIdx] = animations[i]\r\n          if (swapIdx < 2) {\r\n            const barTwo = arrayBars[barTwoIdx]\r\n            const color = swapIdx % 2 === 0 ? secondary: primary\r\n            setTimeout(() => {\r\n                barTwo.style.backgroundColor = color\r\n            }, 20 * i * animationSpeed)\r\n          } else {\r\n            setTimeout(() => {\r\n                if(swapIdx === 2) {\r\n                    const [barOneIdx, height1] = animations[i]\r\n                    const barOne = arrayBars[barOneIdx]\r\n                    barOne.style.height = `${height1}px`\r\n                } else {\r\n                    const [height2, barTwoIdx] = animations[i]\r\n                    const barTwo = arrayBars[barTwoIdx]\r\n                    barTwo.style.height = `${height2}px`\r\n                }\r\n            }, 20 * i * animationSpeed)\r\n          }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array)\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            const [barOneIdx, barTwoIdx, swapIdx] = animations[i]\r\n            if(swapIdx === 0) {\r\n                const barOne = arrayBars[barOneIdx]\r\n                const barTwo = arrayBars[barTwoIdx]\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = secondary\r\n                    barTwo.style.backgroundColor = secondary\r\n                  }, 20 * i * animationSpeed)\r\n            } else if(swapIdx === 2 || swapIdx === 3) {\r\n                setTimeout(() => {\r\n                    if(swapIdx === 2) {\r\n                        const [barOneIdx, height1] = animations[i]\r\n                        const barOne = arrayBars[barOneIdx]\r\n                        barOne.style.height = `${height1}px`\r\n                    } else {\r\n                        const [height2, barTwoIdx] = animations[i]\r\n                        const barTwo = arrayBars[barTwoIdx]\r\n                        barTwo.style.height = `${height2}px`\r\n                    }\r\n                }, 20 * i * animationSpeed)\r\n            } else {\r\n                const barOne = arrayBars[barOneIdx]\r\n                const barTwo = arrayBars[barTwoIdx]\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = primary\r\n                    barTwo.style.backgroundColor = primary\r\n                }, 20 * i * animationSpeed)\r\n            }\r\n        }\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array)\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar')\r\n          const isColorChange = i % 3 !== 2\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i]\r\n            const barOne = arrayBars[barOneIdx]\r\n            const barTwo = arrayBars[barTwoIdx]\r\n            const color = i % 3 === 0 ? secondary: primary\r\n            setTimeout(() => {\r\n              barOne.style.backgroundColor = color\r\n              barTwo.style.backgroundColor = color\r\n            }, 20 * i * animationSpeed)\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i]\r\n              const barOne = arrayBars[barOneIdx]\r\n              barOne.style.height = `${newHeight}px`\r\n            }, 20 * i * animationSpeed)\r\n          }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n\r\n    }\r\n\r\n    calculateWidth() {\r\n        if(array_size < 30)\r\n            return 3\r\n        if(array_size < 45)\r\n            return 2\r\n        if(array_size < 70)\r\n            return 1\r\n        if(array_size < 100)\r\n            return 0.8\r\n        if(array_size < 120)\r\n            return 0.7\r\n        if(array_size < 140)\r\n            return 0.6\r\n        if(array_size < 160)\r\n            return 0.5\r\n        if(array_size < 180)\r\n            return 0.4\r\n        if(array_size <= 200)\r\n            return 0.3\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state\r\n\r\n        return (\r\n            <div>\r\n                <div class = \"nav-bar\">\r\n                    <span>\r\n                        <button onClick={() => this.resetArrayValues()}>Generate New Array</button>\r\n                    </span>\r\n                    <span class = \"vertical-line\" />\r\n                    <span>\r\n                        <button>Change Array Size and Sorting Speed</button>    \r\n                        <input class = \"slider\" type = \"range\" id = \"test\" min = \"10\" max = \"200\" step = \"1\" onInput={() => this.UpdateArraySize(test.value)} value = {array_size} /> \r\n                    </span>\r\n                    <span class = \"vertical-line\" />\r\n                    <span>\r\n                        <button onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                        {/*<button onClick={() => this.quickSort()}>Quick Sort</button>*/}\r\n                    </span>\r\n                    <span class = \"vertical-line\" />\r\n                </div>\r\n                    {array.map((value, idx) => (\r\n                        <div className = \"array-bar\"\r\n                            key = {idx}\r\n                            style = {{\r\n                            value: array[idx],\r\n                            backgroundColor: primary,\r\n                            width: `${this.calculateWidth()}vw`,\r\n                            height: `${value}px`,}}>\r\n                            <div class = \"value\">{0}</div>\r\n                        </div>\r\n                    ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n        // https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\n        function randomIntFromInterval(min, max) {\r\n            // min and max included\r\n            return Math.floor(Math.random() * (max - min + 1) + min);\r\n        }","export function getSelectionSortAnimations(array) {\r\n    const animations = []\r\n    selectionSort(array, animations)\r\n    return animations\r\n}\r\n\r\nfunction selectionSort(array, animations) {\r\n    for(let i = 0; i < array.length; i++) {\r\n        let minimum = i\r\n        for(let j = i + 1; j < array.length; j++) {\r\n            if(array[j] < array[minimum]) {\r\n                minimum = j\r\n            }\r\n            animations.push([i, j, 0])\r\n            animations.push([i, j, 1])\r\n        }\r\n        animations.push([i, array[minimum], 2])\r\n        animations.push([array[i], minimum, 3])\r\n        let temp = array[i]\r\n        array[i] = array[minimum]\r\n        array[minimum] = temp \r\n    }\r\n}","export function getBubbleSortAnimations(array) {\r\n    const animations = []\r\n    bubbleSort(array, animations)\r\n    return animations\r\n}\r\n\r\nfunction bubbleSort(array, animations) {\r\n    for(let i = 0; i < array.length; i++) {\r\n        for(let j = 0; j < array.length - i - 1; j++) {\r\n            if(array[j] > array[j + 1]) {\r\n                animations.push([j, j + 1, 0])\r\n                animations.push([j, array[j + 1], 2])\r\n                animations.push([array[j], j + 1, 3])\r\n                animations.push([j, j + 1, 1])\r\n                let temp = array[j]\r\n                array[j] = array[j + 1]\r\n                array[j + 1] = temp\r\n            }\r\n        } \r\n    }\r\n\r\n    if(animations.length === 0) {\r\n        for(let i = 0; i < array.length; i++) {\r\n            for(let j = 0; j < array.length - i - 1; j++) {\r\n                animations.push([j, j + 1, 0])\r\n                animations.push([j, j + 1, 1])\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Visualizer from './SortingVisualizer/sortingVisualizer'; \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}